@using AllisonOwenWedding.Models
@using Newtonsoft.Json;
@inject HttpClient HttpClient

<Dialog @ref="ErrorDialog" Title="Whoops!" ShowOkayButton="true">
    <p>Oh shoot, we failed to submit your RSVP! Please try again. If you continue to have problems, let Owen or Allison know your response manually.</p>
</Dialog>
<EditForm class="rsvp-form" Model="InviteeUpdate" OnValidSubmit="UpdateInviteeAsync">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <label for="accepted">Able to attend?</label>
    <InputSelect id="accepted" class="form-element" @bind-Value="InviteeUpdate.RsvpResponse">
        <option value="@AcceptedResponse.Default" selected hidden>Choose response</option>
        <option value="@AcceptedResponse.Accept">Accept</option>
        <option value="@AcceptedResponse.Reject">Decline</option>
    </InputSelect>
    @if (WeddingInvitee.GuestsExpected > 0)
    {
        <label for="guests">Additional Guests</label>
        <InputSelect id="guests" class="form-element" disabled="@IsGuestInputDisabled" @bind-Value="InviteeUpdate.GuestsComing">
            @for(int i = 0; i <= WeddingInvitee.GuestsExpected; i++)
            {
                <option value="@i" selected="@(i == WeddingInvitee.GuestsComing)">+@i</option>
            }
        </InputSelect>
    }
    <input class="form-element button-input submit-input" type="submit" disabled="@IsSubmitButtonDisabled" value="Submit" />
    <input class="form-element button-input" type="reset" @onclick="async () => await ResetForm.InvokeAsync()" value="Cancel" />
</EditForm>

@code {
    [Parameter]
    public WeddingInvitee WeddingInvitee { get; set; } = new();
    [Parameter]
    public EventCallback ResetForm { get; set; }
    private RsvpInviteeUpdate InviteeUpdate = new();
    private Dialog ErrorDialog;

    protected override void OnInitialized()
    {
        InviteeUpdate = new(WeddingInvitee);
    }

    /// <summary>
    /// Whether or not the number of guests coming input is disabled.
    /// </summary>
    private bool IsGuestInputDisabled
    {
        get
        {
            return !InviteeUpdate.Accepted;
        }
    }

    /// <summary>
    /// Whether or not the submit button is disabled.
    /// </summary>
    private bool IsSubmitButtonDisabled
    {
        get
        {
            return InviteeUpdate.RsvpResponse == AcceptedResponse.Default;
        }
    }

    private async Task UpdateInviteeAsync()
    {
        var response = await HttpClient.PutAsJsonAsync("invitees", InviteeUpdate);

        if (response.IsSuccessStatusCode && JsonConvert.DeserializeObject<bool>(await response.Content.ReadAsStringAsync()))
        {
            await ResetForm.InvokeAsync();
        }
        else
        {
            ErrorDialog.Show();   
        }
    }
}