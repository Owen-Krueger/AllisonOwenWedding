@using AllisonOwenWedding.Models
@using Newtonsoft.Json
@inject HttpClient HttpClient

<Dialog @ref="InfoDialog" Title="Whoops!" ShowOkayButton="true">
    <p>@DialogMessage</p>
</Dialog>
<EditForm class="rsvp-form" Model="Request" OnValidSubmit="@OnSubmitAsync">
    <p>The guest list has been finalized. If you have questions or want to update your RSVP, please message Allison or Owen.</p>
    <DataAnnotationsValidator />
    <ValidationSummary />
    <label for="fullName">Full Name</label>
    <InputText id="fullName" class="form-element text-input" @bind-Value="Request.FullName" placeholder="John Doe" />
    <input type="submit" class="form-element button-input submit-input" value="Submit" />
</EditForm>

@code {
    [Inject]
    public ILogger<RsvpSearch> Logger { get; set; }
    [Parameter]
    public EventCallback<WeddingInvitee> SetWeddingInvitee { get; set; }
    private RsvpSearchRequest Request = new();
    private Dialog InfoDialog;
    private string DialogMessage;

    /// <summary>
    /// Attempt to find the invitee
    /// </summary>
    private async Task OnSubmitAsync()
    {
        try
        {
            var response = await HttpClient.GetAsync($"invitees/{Request.FullName}");
            var invitee = JsonConvert.DeserializeObject<WeddingInvitee>(await response.Content.ReadAsStringAsync());

            if (invitee != null)
            {
                await SetWeddingInvitee.InvokeAsync(invitee);
            }
            else
            {
                DialogMessage = "We couldn't find you! Please try again";
                InfoDialog.Show();
            }
        }
        catch (Exception e)
        {
            Logger.LogError($"Exception thrown: {e.Message}");
            DialogMessage = "Something went wrong. Please try again.";
            InfoDialog.Show();   
        }
    }
}