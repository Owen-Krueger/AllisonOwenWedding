@using AllisonOwenWedding.Models
<Dialog @ref="ErrorDialog" Title="Whoops!" ShowOkayButton="true">
    <p>Oh shoot, we failed to submit your RSVP! Please try again. If you continue to have problems, let Owen or Allison know your response manually.</p>
</Dialog>
<EditForm class="w-25 rounded p-5 rsvp-form" Model="InviteeUpdate" OnValidSubmit="UpdateInviteeAsync">
    <div class="form-group">
        <label for="accepted">Able to attend?</label>
        <InputSelect id="accepted" class="form-control" @bind-Value="InviteeUpdate.RsvpResponse">
            <option value="@AcceptedResponse.Default" selected hidden>Choose response</option>
            <option value="@AcceptedResponse.Accept">Accept</option>
            <option value="@AcceptedResponse.Reject">Decline</option>
        </InputSelect>
    </div>
    @if (InviteeUpdate.GuestsExpected > 0)
    {
        <div class="form-group">
            <label for="guests">Additional Guests</label>
            <div>
                <InputSelect id="guests" class="form-control" disabled="@IsGuestInputDisabled" @bind-Value="InviteeUpdate.GuestsComing">
                    @for(int i = 0; i <= InviteeUpdate.GuestsExpected; i++)
                    {
                        <option value="@i">+@i</option>
                    }
                </InputSelect>
            </div>
        </div>
    }
    <div class="form-row justify-content-between mt-4">
        <button class="btn col-md-5" type="submit" disabled="@IsSubmitButtonDisabled">Submit</button>
        <button class="btn col-md-5" type="reset" @onclick="async () => await ResetForm.InvokeAsync()">Cancel</button>
    </div>
</EditForm>